<!doctype html>
<html lang="ru" data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22ru%22%7D%7D"> 
 <head> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width,initial-scale=1.0,viewport-fit=cover"> 
  <meta name="referrer" content="unsafe-url"> 
  <title>Используем SQLite в KPHP и PHP через FFI / Комментарии / Хабр</title> 
  <style>
    /* cyrillic-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSxf6TF0.woff2) format('woff2');
      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
    }

    /* cyrillic */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveQhf6TF0.woff2) format('woff2');
      unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
    }

    /* latin-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSBf6TF0.woff2) format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }

    /* latin */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveRhf6.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }

    /* non-breaking hyphen */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/l/font?kit=KFOlCnqEu92Fr1MmEU9vBh0_IsHAlmrO6g&skey=ee881451c540fdec&v=v29) format('woff2');
      unicode-range: U+02011;
    }
  </style> 
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.961b6771.css" as="style">
  <link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.55ca5167.js" as="script">
  <link rel="preload" href="https://assets.habr.com/habr-web/css/app.d1834a6b.css" as="style">
  <link rel="preload" href="https://assets.habr.com/habr-web/js/app.69ba180e.js" as="script">
  <link rel="preload" href="https://assets.habr.com/habr-web/css/page-article-comments.5497aa9d.css" as="style">
  <link rel="preload" href="https://assets.habr.com/habr-web/js/page-article-comments.97bb766a.js" as="script"> 
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.961b6771.css">
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.d1834a6b.css">
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/page-article-comments.5497aa9d.css"> 
  <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.2822d469ec31a56409ac330bbcf7fcbf.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script> 
  <script src="//www.googletagservices.com/tag/js/gpt.js" async></script> 
  <style>.grecaptcha-badge{visibility: hidden;}</style> 
  <meta name="habr-version" content="2.66.0"> 
  <meta data-vue-meta="ssr" itemprop="image" content="/img/habr_ru.png" data-vmid="image:itemprop">
  <meta data-vue-meta="ssr" property="og:image" content="/img/habr_ru.png" data-vmid="og:image">
  <meta data-vue-meta="ssr" property="og:image:width" content="1200" data-vmid="og:image:width">
  <meta data-vue-meta="ssr" property="og:image:height" content="630" data-vmid="og:image:height">
  <meta data-vue-meta="ssr" property="aiturec:image" content="/img/habr_ru.png" data-vmid="aiturec:image">
  <meta data-vue-meta="ssr" name="twitter:image" content="/img/habr_ru.png" data-vmid="twitter:image">
  <meta data-vue-meta="ssr" property="vk:image" content="/img/habr_ru.png?format=vk" data-vmid="vk:image">
  <meta data-vue-meta="ssr" property="fb:app_id" content="444736788986613">
  <meta data-vue-meta="ssr" property="fb:pages" content="472597926099084">
  <meta data-vue-meta="ssr" name="twitter:card" content="summary_large_image">
  <meta data-vue-meta="ssr" name="twitter:site" content="@habr_com">
  <meta data-vue-meta="ssr" property="og:locale" content="ru_RU" data-vmid="og:locale">
  <meta data-vue-meta="ssr" property="og:type" content="website" data-vmid="og:type">
  <meta data-vue-meta="ssr" property="og:site_name" content="Хабр" data-vmid="og:site_name">
  <meta data-vue-meta="ssr" property="og:title" content="Хабр" data-vmid="og:title">
  <meta data-vue-meta="ssr" property="og:url" content="https://habr.com/ru/post/653677/comments/" data-vmid="og:url"> 
  <link data-vue-meta="ssr" image_src="image" href="/img/habr_ru.png" data-vmid="image:href">
  <link data-vue-meta="ssr" href="https://habr.com/ru/rss/post/653677/?fl=ru" type="application/rss+xml" title="" rel="alternate" name="rss">
  <link data-vue-meta="ssr" href="https://habr.com/ru/post/653677/" rel="canonical" data-vmid="canonical">
  <link data-vue-meta="ssr" data-vmid="hreflang"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="#303b44"> 
  <meta name="msapplication-TileColor" content="#629FBC"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="mobile-web-app-capable" content="yes"> 
  <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png"> 
  <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png"> 
  <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png"> 
  <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png"> 
  <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png"> 
  <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png"> 
  <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)" href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png"> 
  <link rel="apple-touch-startup-image" media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png"> 
  <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg"> 
  <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest"> 
 </head> 
 <body> 
  <div id="app" data-server-rendered="true" data-async-called="true">
   <div class="tm-layout__wrapper">
    <!----> 
    <div></div> <!----> 
    <header class="tm-header">
     <div class="tm-page-width">
      <div class="tm-header__container">
       <!----> <span class="tm-header__logo-wrap"><a href="/ru/" class="tm-header__logo tm-header__logo_ru">
         <svg height="16" width="16" class="tm-svg-img tm-header__icon">
          <title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use>
         </svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> 
       <div class="tm-dropdown tm-header__projects">
        <div class="tm-dropdown__head">
         <button class="tm-header__dropdown-toggle">
          <svg height="16" width="16" class="tm-svg-img tm-header__icon tm-header__icon_dropdown">
           <title>Открыть список</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#arrow-down"></use>
          </svg></button>
        </div> <!---->
       </div> <a href="/ru/sandbox/start/" class="tm-header__become-author-btn"> Как стать автором </a> 
       <div class="tm-feature tm-header__feature tm-feature_variant-inline">
        <!---->
       </div> <!----> <!---->
      </div>
     </div>
    </header> 
    <div class="tm-layout">
     <div class="tm-page-progress-bar"></div> 
     <div data-menu-sticky="true" class="tm-base-layout__header tm-base-layout__header_is-sticky">
      <div class="tm-page-width">
       <div class="tm-base-layout__header-wrapper">
        <div class="tm-main-menu">
         <div class="tm-main-menu__section">
          <nav class="tm-main-menu__section-content">
           <!----> <a href="/ru/flows/all" class="tm-main-menu__item"> Все потоки </a> <a href="/ru/flows/develop/" class="tm-main-menu__item"> Разработка </a><a href="/ru/flows/admin/" class="tm-main-menu__item"> Администрирование </a><a href="/ru/flows/design/" class="tm-main-menu__item"> Дизайн </a><a href="/ru/flows/management/" class="tm-main-menu__item"> Менеджмент </a><a href="/ru/flows/marketing/" class="tm-main-menu__item"> Маркетинг </a><a href="/ru/flows/popsci/" class="tm-main-menu__item"> Научпоп </a>
          </nav>
         </div>
        </div> 
        <div class="tm-header-user-menu tm-base-layout__user-menu">
         <a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search">
          <svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark">
           <title>Поиск</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#search"></use>
          </svg></a> <!----> <!----> <!----> 
         <div class="tm-header-user-menu__item tm-header-user-menu__user_desktop">
          <div class="tm-dropdown">
           <div class="tm-dropdown__head">
            <svg height="24" width="24" data-test-id="menu-toggle-guest" class="tm-svg-img tm-header-user-menu__icon">
             <title>Профиль</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#header-user"></use>
            </svg> <!---->
           </div> <!---->
          </div> <!---->
         </div> <!---->
        </div>
       </div>
      </div>
     </div> <!----> 
     <div class="tm-page-width"></div> 
     <main class="tm-layout__container">
      <div hl="ru" data-async-called="true" class="tm-page">
       <div class="tm-page-width">
        <!----> 
        <div class="tm-page__wrapper">
         <div class="tm-page__main tm-page__main_has-sidebar">
          <div class="pull-down">
           <div class="pull-down__header" style="height:0px;">
            <div class="pull-down__content" style="bottom:10px;">
             <svg height="24" width="24" class="tm-svg-img pull-down__arrow">
              <title>Обновить</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#pull-arrow"></use>
             </svg>
            </div>
           </div> 
           <article class="tm-article-comments__article-body">
            <div class="tm-article-comments__article-snippet">
             <div class="tm-article-snippet">
              <div class="tm-article-snippet__meta-container">
               <div class="tm-article-snippet__meta">
                <span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/quasilyte/" title="quasilyte" class="tm-user-info__userpic">
                  <div class="tm-entity-image">
                   <img alt="" height="24" src="//habrastorage.org/r/w32/getpro/habr/avatars/230/760/4b9/2307604b97e0f800b5f18bdfeb053554.png" width="24" class="tm-entity-image__pic">
                  </div></a> <span class="tm-user-info__user"><a href="/ru/users/quasilyte/" class="tm-user-info__username"> quasilyte </a> </span></span> <span class="tm-article-snippet__datetime-published"><time datetime="2022-03-11T14:53:06.000Z" title="2022-03-11, 17:53">вчера в 17:53</time></span>
               </div> <!---->
              </div> 
              <h1 class="tm-article-snippet__title tm-article-snippet__title_h1"><a href="/ru/post/653677/" data-article-link="" class="tm-article-snippet__title-link router-link-active"><span>Используем SQLite в KPHP и PHP через FFI</span></a></h1> 
              <div class="tm-article-snippet__hubs">
               <span class="tm-article-snippet__hubs-item"><a href="/ru/hub/webdev/" class="tm-article-snippet__hubs-item-link"><span>Разработка веб-сайтов</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/open_source/" class="tm-article-snippet__hubs-item-link"><span>Open source</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/php/" class="tm-article-snippet__hubs-item-link"><span>PHP</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/programming/" class="tm-article-snippet__hubs-item-link"><span>Программирование</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/sqlite/" class="tm-article-snippet__hubs-item-link"><span>SQLite</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span>
              </div> <!----> <!----> <!---->
             </div> 
             <div class="tm-data-icons">
              <!----> 
              <div class="tm-votes-meter tm-data-icons__item">
               <svg height="24" width="24" class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon_appearance-article">
                <title>Всего голосов 12: ↑12 и ↓0</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#counter-rating"></use>
               </svg> <span title="Всего голосов 12: ↑12 и ↓0" class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating">+12</span>
              </div> <span title="Количество просмотров" class="tm-icon-counter tm-data-icons__item">
               <svg height="24" width="24" class="tm-svg-img tm-icon-counter__icon">
                <title>Просмотры</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#counter-views"></use>
               </svg> <span class="tm-icon-counter__value">669</span></span> <button title="Добавить в закладки" type="button" class="bookmarks-button tm-data-icons__item"><span title="Добавить в закладки" class="tm-svg-icon__wrapper bookmarks-button__icon">
                <svg height="24" width="24" class="tm-svg-img tm-svg-icon">
                 <title>Добавить в закладки</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#counter-favorite"></use>
                </svg></span> <span title="Количество пользователей, добавивших публикацию в закладки" class="bookmarks-button__counter"> 9 </span></button> 
              <div title="Читать комментарии" class="tm-article-comments-counter-link tm-data-icons__item">
               <a href="/ru/post/653677/comments/" aria-current="page" class="tm-article-comments-counter-link__link">
                <svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon">
                 <title>Комментарии</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#counter-comments"></use>
                </svg> <span class="tm-article-comments-counter-link__value"> 1 </span></a> <!---->
              </div> <!----> 
              <div class="v-portal" style="display:none;"></div>
             </div>
            </div>
           </article> 
           <div class="tm-ad-banner__container tm-article-comments__top-banner">
            <!----> 
            <div id="commentsBanner21399" class="tm-ad-banner tm-ad-banner_variant-leaderboard"></div>
           </div> 
           <div data-async-called="true" class="tm-article-comments-offloaded">
            <div class="tm-article-comments">
             <div class="tm-comments-wrapper">
              <div class="tm-comments-wrapper__wrapper">
               <header class="tm-comments-wrapper__header">
                <h2 class="tm-comments-wrapper__title"> Комментарии <span class="tm-comments-wrapper__comments-count"> 1 </span></h2> 
                <div class="tm-comments-wrapper__header-aside">
                 <!----> <button class="tm-rss-button tm-rss-button_comments-header"><span class="tm-svg-icon__wrapper tm-rss-button__icon">
                   <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
                    <title>Скопировать ссылку на RSS</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#rss"></use>
                   </svg></span></button> <!---->
                </div>
               </header> 
               <div class="tm-comments-wrapper__inner"> 
                <div class="tm-comments__tree">
                 <section class="tm-comment-thread">
                  <!----> 
                  <article class="tm-comment-thread__comment">
                   <a name="comment_24156183" class="tm-comment-thread__target"></a> <button class="tm-comment-thread__breadcrumbs tm-comment-thread__indent_b_l-0">
                    <div class="tm-comment-thread__circle"></div></button> <!----> 
                   <div data-comment-body="24156183" class="tm-comment-thread__indent_l-0">
                    <div data-gallery-root="" class="tm-comment">
                     <header data-comment-header tabindex="-1" class="tm-comment__header">
                      <div class="tm-comment__header-inner">
                       <span class="tm-user-info tm-comment__user-info"><a href="/ru/users/sbase/" title="sbase" class="tm-user-info__userpic">
                         <div class="tm-entity-image">
                          <img alt="" height="24" src="//habrastorage.org/r/w32/getpro/habr/avatars/b63/472/c03/b63472c03c768a3aa2edb1e5f1eb0efe.jpg" width="24" class="tm-entity-image__pic">
                         </div></a> <span class="tm-user-info__user"><a href="/ru/users/sbase/" class="tm-user-info__username"> sbase </a> <a href="#comment_24156183" class="tm-comment-thread__comment-link"> 11.03.2022 в 18:28 <!----></a></span></span>
                      </div> 
                      <div class="tm-comment__buttons">
                       <!----> <!---->
                      </div>
                     </header> 
                     <div class="tm-comment__body-content tm-comment__body-content_v2">
                      <div xmlns="http://www.w3.org/1999/xhtml">
                       <p>Отличные новости! Теперь бы еще для PostgreSQL сделать обвязку ;)</p>
                      </div>
                     </div> <!----> <!---->
                    </div> 
                    <div class="tm-comment-footer">
                     <div class="tm-votes-meter tm-comment-footer__votes-meter">
                      <svg height="24" width="24" class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon_appearance-comment">
                       <title>Всего голосов 1: ↑1 и ↓0</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#counter-rating"></use>
                      </svg> <span title="Всего голосов 1: ↑1 и ↓0" class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-comment tm-votes-meter__value_rating">+1</span>
                     </div> <button type="button" class="tm-comment-thread__button"> Ответить </button> <button title="Добавить в закладки" type="button" class="bookmarks-button tm-comment-footer__button tm-comment-footer__button_with-icon"><span title="Добавить в закладки" class="tm-svg-icon__wrapper bookmarks-button__icon">
                       <svg height="24" width="24" class="tm-svg-img tm-svg-icon">
                        <title>Добавить в закладки</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#counter-favorite"></use>
                       </svg></span> <!----></button> <button data-comment-popup="24156183" class="tm-comment__button tm-comment__button_with-icon">
                      <svg height="16" width="16" class="tm-svg-img tm-comment__icon tm-comment__icon_dots">
                       <title>Ещё</title> <use xlink:href="/img/megazord-v25.4b679db1.svg#dots"></use>
                      </svg></button> <!---->
                    </div>
                   </div>
                  </article> <!----> <!---->
                 </section>
                </div> 
                <div class="v-portal" style="display:none;"></div>
               </div>
              </div> 
              <div class="tm-notice tm-comments__comment-notice tm-notice_positive">
               <!----> 
               <div class="tm-notice__inner">
                <!----> 
                <div class="tm-notice__content">
                 <span>Только полноправные пользователи могут оставлять комментарии. <a rel="nofollow" href="/kek/v1/auth/habrahabr/?back=/ru/post/653677/comments/&amp;hl=ru">Войдите</a>, пожалуйста.</span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div> <!----> <!---->
          </div>
         </div> 
         <div class="tm-page__sidebar">
          <div hl="ru" id="653677" class="tm-layout-sidebar">
           <div class="tm-layout-sidebar__ads tm-layout-sidebar__ads_initial">
            <div class="tm-ad-banner__container tm-layout-sidebar__banner tm-layout-sidebar__banner_top">
             <!----> 
             <div id="sidebarBanner21400" class="tm-ad-banner tm-ad-banner_variant-half-page"></div>
            </div>
           </div> 
           <div class="tm-sexy-sidebar tm-sexy-sidebar_initial" style="margin-top:0px;">
            <!----> 
            <div class="tm-ad-banner__container tm-layout-sidebar__banner tm-layout-sidebar__banner_bottom">
             <!----> 
             <div id="sidebarBannerBottom21401" class="tm-ad-banner tm-ad-banner_variant-medium-rectangle"></div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </main> <!---->
    </div> 
    <div class="tm-footer-menu">
     <div class="tm-page-width">
      <div class="tm-footer-menu__container">
       <div class="tm-footer-menu__block">
        <h3 class="tm-footer-menu__block-title"> Ваш аккаунт </h3> 
        <div class="tm-footer-menu__block-content">
         <ul class="tm-footer-menu__list">
          <li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/post/653677/comments/&amp;hl=ru" rel="nofollow" target="_self"> Войти </a></li>
          <li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/post/653677/comments/&amp;hl=ru" rel="nofollow" target="_self"> Регистрация </a></li>
         </ul>
        </div>
       </div>
       <div class="tm-footer-menu__block">
        <h3 class="tm-footer-menu__block-title"> Разделы </h3> 
        <div class="tm-footer-menu__block-content">
         <ul class="tm-footer-menu__list">
          <li class="tm-footer-menu__list-item"><a href="/ru/" class="footer-menu__item-link router-link-active"> Публикации </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/news/" class="footer-menu__item-link"> Новости </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/hubs/" class="footer-menu__item-link"> Хабы </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/companies/" class="footer-menu__item-link"> Компании </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/users/" class="footer-menu__item-link"> Авторы </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/sandbox/" class="footer-menu__item-link"> Песочница </a></li>
         </ul>
        </div>
       </div>
       <div class="tm-footer-menu__block">
        <h3 class="tm-footer-menu__block-title"> Информация </h3> 
        <div class="tm-footer-menu__block-content">
         <ul class="tm-footer-menu__list">
          <li class="tm-footer-menu__list-item"><a href="/ru/docs/help/" class="footer-menu__item-link"> Устройство сайта </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/docs/authors/codex/" class="footer-menu__item-link"> Для авторов </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/docs/companies/corpblogs/" class="footer-menu__item-link"> Для компаний </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/docs/docs/transparency/" class="footer-menu__item-link"> Документы </a></li>
          <li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement" target="_blank"> Соглашение </a></li>
          <li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/" target="_blank"> Конфиденциальность </a></li>
         </ul>
        </div>
       </div>
       <div class="tm-footer-menu__block">
        <h3 class="tm-footer-menu__block-title"> Услуги </h3> 
        <div class="tm-footer-menu__block-content">
         <ul class="tm-footer-menu__list">
          <li class="tm-footer-menu__list-item"><a href="https://docs.google.com/presentation/d/e/2PACX-1vQLwRfQmXibiUlWaRg-BAc38s7oM3lJiaPju7qmdJsp8ysIvZ_G-Npem0njJLMozE2bPHMpDqiI5hhy/pub?start=false&amp;loop=false&amp;delayms=60000&amp;slide=id.g91a03369cd_4_297" target="_blank"> Реклама </a></li>
          <li class="tm-footer-menu__list-item"><a href="https://habrastorage.org/storage/stuff/habr/service_price.pdf" target="_blank"> Тарифы </a></li>
          <li class="tm-footer-menu__list-item"><a href="https://docs.google.com/presentation/d/e/2PACX-1vQJJds8-Di7BQSP_guHxICN7woVYoN5NP_22ra-BIo4bqnTT9FR6fB-Ku2P0AoRpX0Ds-LRkDeAoD8F/pub?start=false&amp;loop=false&amp;delayms=60000" target="_blank"> Контент </a></li>
          <li class="tm-footer-menu__list-item"><a href="https://tmtm.timepad.ru/" target="_blank"> Семинары </a></li>
          <li class="tm-footer-menu__list-item"><a href="/ru/megaprojects/" class="footer-menu__item-link"> Мегапроекты </a></li>
         </ul>
        </div>
       </div>
      </div>
     </div>
    </div> 
    <div class="tm-footer">
     <div class="tm-page-width">
      <div class="tm-footer__container">
       <!----> 
       <div class="tm-footer__social">
        <a href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon">
         <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
          <title>Facebook</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-facebook"></use>
         </svg></a><a href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon">
         <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
          <title>Twitter</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-twitter"></use>
         </svg></a><a href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon">
         <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
          <title>VK</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-vkontakte"></use>
         </svg></a><a href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon">
         <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
          <title>Telegram</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-telegram"></use>
         </svg></a><a href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon">
         <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
          <title>Youtube</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-youtube"></use>
         </svg></a><a href="https://zen.yandex.ru/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon">
         <svg height="16" width="16" class="tm-svg-img tm-svg-icon">
          <title>Яндекс Дзен</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-zen"></use>
         </svg></a>
       </div> 
       <div class="v-portal" style="display:none;"></div> <button class="tm-footer__link"><!----> Настройка языка </button> <a href="/ru/about" class="tm-footer__link"> О сайте </a> <a href="/ru/feedback/" class="tm-footer__link"> Техническая поддержка </a> <!----> <a href="/berserk-mode-nope" class="tm-footer__link"> Вернуться на старую версию </a> 
       <div class="tm-footer-copyright">
        <span class="tm-copyright"><span class="tm-copyright__years">© 2006–2022 </span> <span class="tm-copyright__name">«<a href="https://company.habr.com/" rel="noopener" target="_blank" class="tm-copyright__link">Habr</a>»</span></span>
       </div>
      </div>
     </div>
    </div> <!----> <!---->
   </div> 
   <div class="vue-portal-target"></div>
  </div> 
  <script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"653677":{"id":"653677","timePublished":"2022-03-11T14:53:06+00:00","isCorporative":false,"lang":"ru","titleHtml":"Используем SQLite в KPHP и PHP через FFI","leadData":{"textHtml":"\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fbo\u002Fnc\u002Fpi\u002Fboncpiokbph5gehyjnsqycl_78i.png\"\u003E\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EСегодня я расскажу о новой библиотеке, которая позволяет использовать SQLite сразу из PHP и KPHP.\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EСоздавать FFI пакеты — не просто. Под катом будут ответы на следующие вопросы:\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EКак упростить установку и сделать библиотеку кроссплатформенной?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКак не допустить утечек ресурсов?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКак сделать библиотеку совместимой с KPHP и PHP?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКакова производительность FFI решений?\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u003E\r\n\u003Cp\u003EМы не только попробуем новую библиотеку в действии, но и выработаем ряд практик, которые при широком распространении могут улучшить ситуацию с FFI пакетами в сообществе.\u003C\u002Fp\u003E","imageUrl":null,"buttonTextHtml":"Читать дальше &rarr;","image":null},"editorVersion":"1.0","postType":"article","postLabels":[],"author":{"scoreStats":{"score":106,"votesCount":124},"rating":32,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"id":"1093718","alias":"quasilyte","fullname":"Искандер","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F230\u002F760\u002F4b9\u002F2307604b97e0f800b5f18bdfeb053554.png","speciality":"Making developer tools"},"statistics":{"commentsCount":1,"favoritesCount":9,"readingCount":669,"score":12,"votesCount":12},"hubs":[{"relatedData":null,"id":"91","alias":"webdev","type":"collective","title":"Разработка веб-сайтов","titleHtml":"Разработка веб-сайтов","isProfiled":true},{"relatedData":null,"id":"144","alias":"open_source","type":"collective","title":"Open source","titleHtml":"Open source","isProfiled":true},{"relatedData":null,"id":"260","alias":"php","type":"collective","title":"PHP","titleHtml":"PHP","isProfiled":true},{"relatedData":null,"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true},{"relatedData":null,"id":"18554","alias":"sqlite","type":"collective","title":"SQLite","titleHtml":"SQLite","isProfiled":true}],"flows":[{"id":"1","alias":"develop","title":"Разработка"}],"relatedData":null,"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fbo\u002Fnc\u002Fpi\u002Fboncpiokbph5gehyjnsqycl_78i.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fbo\u002Fnc\u002Fpi\u002Fboncpiokbph5gehyjnsqycl_78i.png\"\u002F\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСегодня я расскажу о новой библиотеке, которая позволяет использовать SQLite сразу из PHP и KPHP.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСоздавать FFI пакеты — не просто. Под катом будут ответы на следующие вопросы:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EКак упростить установку и сделать библиотеку кроссплатформенной?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКак не допустить утечек ресурсов?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКак сделать библиотеку совместимой с KPHP и PHP?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКакова производительность FFI решений?\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EМы не только попробуем новую библиотеку в действии, но и выработаем ряд практик, которые при широком распространении могут улучшить ситуацию с FFI пакетами в сообществе.\u003C\u002Fp\u003E\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"predislovie\"\u003EПредисловие\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EForeign Function Interface для PHP не так популярен, как мог бы быть, ведь для очень большого количества популярных библиотек уже есть нативные PHP расширения. Большинству будет достаточно чего-то из поставляемого с PHP, а для остальных есть внешние репозитории и \u003Ca href=\"https:\u002F\u002Fpecl.php.net\u002F\" rel=\"nofollow noopener noreferrer\"\u003EPECL\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EУ FFI есть ряд преимуществ:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EНе нужно писать сишный код\u003C\u002Fli\u003E\r\n\u003Cli\u003EПосле изменения кода библиотеки не требуется перекомпиляция модуля\u003C\u002Fli\u003E\r\n\u003Cli\u003EБолее высокая обратная совместимость: мы не зависим от внутреннего Zend API\u003C\u002Fli\u003E\r\n\u003Cli\u003EПроще распространять код как composer пакеты\u003C\u002Fli\u003E\r\n\u003Cli\u003EСледуя конвенциям, мы можем сделать FFI пакеты ещё более удобными\u003C\u002Fli\u003E\r\n\u003Cli\u003EПотенциально более низкий порог входя для создания библиотек (но есть нюансы)\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля KPHP этот инструмент стал единственным способом расширения со стороны. Причём работать такие расширения будут как на KPHP, так и на PHP.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЕсть так же и недостатки, связанные с этим подходом. Начиная от более низкой производительности, заканчивая менее обширной документацией. Хотя я бы сказал, что сам по себе FFI довольно прост. Сложности в основном возникают при попытках использовать FFI библиотеки в реальных условиях, а не в упрощённых CLI утилитах.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСегодня я постараюсь заполнить некоторые пробелы и поделиться некоторыми идеями по поводу того, как стоит проектировать и распространять FFI пакеты. Но начнём мы с обзора самой библиотеки KSQLite.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"ustanovka-biblioteki\"\u003EУстановка библиотеки\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EКогда мы ставим обычный composer пакет, нам достаточно выполнить одну лишь команду \u003Ccode\u003Ecomposer require\u003C\u002Fcode\u003E, и библиотека становится доступной в нашем проекте.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНачнём как раз с этого:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ composer require quasilyte\u002Fksqlite\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ случае с FFI библиотеками этого недостаточно. Кроме самой обёртки над C функциями нам так же нужна сама динамическая библиотека.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЧтобы использовать KSQLite, нам потребуется \u003Ccode\u003Elibsqlite3.so\u003C\u002Fcode\u003E на Линуксе, \u003Ccode\u003Elibsqlite3.dylib\u003C\u002Fcode\u003E на MacOS и \u003Ccode\u003Elibsqlite3.dll\u003C\u002Fcode\u003E на Windows.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДопустим, мы устанавливаем библиотеку на Ubuntu.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ sudo apt install sqlite3\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТеперь нужно понять, где же находится \u003Ccode\u003Elibsqlite3.so\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ ldconfig -p | grep sqlite3\n  libsqlite3.so.0 (libc6,x86-64) =\u003E \u002Flib\u002Fx86_64-linux-gnu\u002Flibsqlite3.so.0\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗдесь мы уже встречаем первую сложность: вместо \u003Ccode\u003Elibsqlite3.so\u003C\u002Fcode\u003E у нас файл называется \u003Ccode\u003Elibsqlite3.so.0\u003C\u002Fcode\u003E. Сделав \u003Ccode\u003Edlopen(\"libsqlite3.so\")\u003C\u002Fcode\u003E мы не сможем найти эту библиотеку.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ PHP и KPHP имя динамической библиотеки указывается в заголовочном файле через \u003Ccode\u003Edefine FFI_LIB\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля нашего случая мы могли бы в своей библиотеки написать что-то такое:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E#define FFI_LIB \"libsqlite3.so.0\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЭтот заголовочный файл — часть библиотеки и composer пакета. Он один на все системы. Используя подход с указанием пути как на нашей машине, получаем следующие проблемы:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EА что, если у вас нет суффикса \u003Ccode\u003E.0\u003C\u002Fcode\u003E и файл доступен по обычному имени?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКак быть с MacOS и Windows?\u003C\u002Fli\u003E\r\n\u003Cli\u003EКак понять, что загружена нужная версия библиотеки?\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЯ предлагаю использовать следующую конвенцию во всех FFI пакетах:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Col\u003E\r\n\u003Cli\u003EВ \u003Ccode\u003EFFI_LIB\u003C\u002Fcode\u003E мы не указываем никакого расширения\u003C\u002Fli\u003E\r\n\u003Cli\u003EПути пишем относительные, через директорию \u003Ccode\u003Effilibs\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Fol\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"diff\"\u003E- #define FFI_LIB \"libsqlite3.so.0\"\n+ #define FFI_LIB \".\u002Fffilibs\u002Flibsqlite3\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТеперь для всех систем у нас есть одинаковый рецепт для установки: положить файлик динамической библиотеки в директорию \u003Ccode\u003Effilibs\u003C\u002Fcode\u003E внутри корня приложения. Дополнительный уровень в виде \u003Ccode\u003Effilibs\u003C\u002Fcode\u003E нужен для гибкости. Это может быть ссылка на системный каталог или на любое другое место, где мы сможем найти нужные библиотеки.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"chto-mozhno-sozdat-s-pomoschyu-ksqlite\"\u003EЧто можно создать с помощью KSQLite\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНикаких принципиальных ограничений нет. Всё то, что возможно с помощью расширения \u003Ca href=\"https:\u002F\u002Fwww.php.net\u002Fmanual\u002Fru\u002Fbook.sqlite3.php\" rel=\"nofollow noopener noreferrer\"\u003ESQLite3\u003C\u002Fa\u003E, можно сделать и через KSQLite.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ примерах использования можно найти \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\u002Fblob\u002Fmaster\u002Fexamples\u002Fsimple_site.php\" rel=\"nofollow noopener noreferrer\"\u003Esimple_site\u003C\u002Fa\u003E, который сохраняет данные в локальной базе SQLite.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fys\u002Fm6\u002Fxe\u002Fysm6xens23eqrhj0h7_53khn8ni.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fys\u002Fm6\u002Fxe\u002Fysm6xens23eqrhj0h7_53khn8ni.png\"\u002F\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗапустить этот пример можно на KPHP сервере, встроенном в PHP dev сервере и через любую другую связку (например, \u003Ccode\u003Enginx\u003C\u002Fcode\u003E с \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E). Вот пример запуска на встроенном сервере:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E# Создадим ffilibs с ссылками на библиотеку, если их ещё нет.\nmkdir -p ffilibs\nln -sf $(shell php -f locate_lib.php -- -q) .\u002Fffilibs\u002Flibsqlite3\n\n# Запускаем сервер.\n$ php -d opcache.preload=preload.php -S localhost:8888\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСкрипт \u003Ccode\u003Elocate_lib.php\u003C\u002Fcode\u003E полезен как для пользователей, так и для CI окружений.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E# Запуск без -q предназначен для людей, а не скриптов.\n$ php -f locate_lib.php \nlibrary candidate: \u002Flib\u002Fx86_64-linux-gnu\u002Flibsqlite3.so.0\nlibrary candidate: \u002Flib\u002Fx86_64-linux-gnu\u002Flibsqlite3.so\n\nrun something like this to make it discoverable (unix):\n  mkdir -p ffilibs\n  sudo ln -s \u002Flib\u002Fx86_64-linux-gnu\u002Flibsqlite3.so .\u002Fffilibs\u002Flibsqlite3\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"pishem-zaprosy\"\u003EПишем запросы\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля начала нам нужно открыть соединение с базой данных:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E&lt;?php\n\nrequire_once __DIR__ . '\u002Fvendor\u002Fautoload.php';\n\nuse KSQLite\\KSQLite;\n\n$db = new KSQLite();\n\n\u002F\u002F open() открывает существующий файл SQLite или создаёт\n\u002F\u002F новый в случае его отсутствия.\nif (!$db-\u003Eopen('testdb')) {\n  throw new Exception('open error: ' . $db-\u003EgetLastError());\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗакрывать объект \u003Ccode\u003E$db\u003C\u002Fcode\u003E не нужно. Ниже мы ещё вернёмся к этому вопросу и разберёмся, как KSQLite управляет ресурсами и защищает пользователей от утечек памяти.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EKSQLite предоставляет три основных набора методов для исполнения запросов:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003E\u003Ccode\u003Eexec\u003C\u002Fcode\u003E методы игнорируют возвращаемые базой данных результаты\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003Efetch\u003C\u002Fcode\u003E методы возвращают данные в виде массивов или скаляров\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003Equery\u003C\u002Fcode\u003E методы позволяют самостоятельно обработать данные результатов\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСоздадим тестовую таблицу. Для этого подойдёт метод \u003Ccode\u003Eexec\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$query = '\n  CREATE TABLE IF NOT EXISTS languages(\n    lang_id INTEGER PRIMARY KEY,\n    lang_name TEXT NOT NULL,\n    first_appeared INTEGER NOT NULL,\n    num_elephants REAL NOT NULL\n  );\n';\nif (!$db-\u003Eexec($query)) {\n  \u002F\u002F В настоящем коде у вас будет более серьёзная обработка ошибок.\n  \u002F\u002F Здесь же я буду просто швырять исключения.\n  throw new Exception('create table error: ' . $db-\u003EgetLastError()));\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДобавим немного данных в таблицу \u003Ccode\u003Elanguages\u003C\u002Fcode\u003E. Будем вставлять по одной строке за запрос.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$rows = [\n  ['C', 1972, 0.0],\n  ['C++', 1983, 0.0],\n  ['JavaScript', 1995, 0.0],\n  ['Go', 2009, 0.0],\n];\nforeach ($rows as $row) {\n  $query = \"\n    INSERT INTO languages(lang_name, first_appeared, num_elephants)\n    VALUES(?1, ?2, ?3)\n  \";\n  \u002F\u002F Наш $row - это массив из 3 элементов, с индексами от 0 до 2.\n  \u002F\u002F Параметры запроса индексируются с 1.\n  \u002F\u002F Вспомогательная функция paramsFromList позволяет отобразить\n  \u002F\u002F массив привязок без ручной распаковки.\n  \u002F\u002F\n  \u002F\u002F Другими словами, массив ['C', 1972, 0.0] превращается в\n  \u002F\u002F [1 =\u003E 'C', 2 =\u003E 1972, 3 =\u003E 0.0].\n  $params = KSQLite::paramsFromList($row);\n  if (!$db-\u003Eexec($query, $params)) {\n    throw new Exception('insert: ' . $db-\u003EgetLastError());\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗдесь для каждого \u003Ccode\u003E$row\u003C\u002Fcode\u003E мы заново парсим SQL запрос, выделяем statement объект и используем его для разовой вставки данных.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EМы можем использовать prepared statement API для множественных операций над одним SQL statement:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E\u002F\u002F Воспользуемся именованными параметрами привязок.\n$rows = [\n  [':name' =\u003E 'PHP', ':year' =\u003E 1995, ':elephants' =\u003E 1.0],\n  [':name' =\u003E 'KPHP', ':year' =\u003E 2014, ':elephants' =\u003E 2.0],\n];\n$query = \"\n  INSERT INTO languages(lang_name, first_appeared, num_elephants)\n  VALUES(?name, ?year, ?elephants)\n\";\n$ok = $db-\u003EexecPrepared($query, function(KSQLiteParamsBinder $b) use ($rows) {\n  return $b-\u003EbindFromArray($rows);\n});\nif (!$db-\u003Eexec($query, $params)) {\n  throw new Exception('insert: ' . $db-\u003EgetLastError());\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Ccode\u003EbindFromArray\u003C\u002Fcode\u003E — это вспомогательный метод для частого случая связывания данных по массиву. Без этого метода код выглядел бы как-то так:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$ok = $db-\u003EexecPrepared($query, function(KSQLiteParamsBinder $b) use ($rows) {\n  if ($binder-\u003Equery_index \u003E= count($rows)) {\n    return false; \u002F\u002F Больше у нас нет данных для вставки\n  }\n  foreach ($rows[$binder-\u003Equery_index] as $k =\u003E $v) {\n    $this-\u003Ebind($k, $v);\n  }\n  return true; \u002F\u002F Успешно связали параметры; запрос будет исполнен\n});\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля массивов этот вариант выглядит переусложнённым, но он полезен, если генератор данных у нас похож на поток, где мы не знаем сколько раз нам нужно будет проводить вставку.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВыборки данных проще всего делать через \u003Ccode\u003Efetch\u003C\u002Fcode\u003E методы.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$query = 'SELECT COUNT(*) FROM languages';\n[$count, $ok] = $db-\u003EfetchColumn($query);\nif (!$ok) {\n  throw new Exception('select count: ' . $db-\u003EgetLastError());\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Ccode\u003Efetch\u003C\u002Fcode\u003E, как и остальные методы, поддерживает параметры запросов. Кроме этого, можно передать свою функцию-маппер и управлять тем, какие данные будут добавлены в выходной массив.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$query = 'SELECT * FROM languages WHERE num_elephants \u003E= :x';\n$params = [':x' =\u003E 1.0];\n$mapper = function(KSQLiteQueryContext $ctx) {\n  return $ctx-\u003ErowDataAssoc()['lang_name'];\n};\n[$lang_names, $ok] = $db-\u003Efetch($query, $params, $mapper);\nif (!$ok) {\n  throw new Exception('select langs: ' . $db-\u003EgetLastError());\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"tranzakcii\"\u003EТранзакции\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EРассмотрим следующий пример:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003Eif (!$db-\u003Eexec('BEGIN')) {\n  throw new Exception('begin transaction: ' . $db-\u003EgetLastError());\n}\n$ok = execute_queries($db); \u002F\u002F Выполняем запросы внутри транзакции\n$action = $ok ? 'COMMIT' : 'ROLLBACK';\nif (!$db-\u003Eexec($action)) {\n  throw new Exception(\"$action :\" . $db-\u003EgetLastError());\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЭтот подход будет работать в простейших случаях, но здесь очень легко допустить ошибку. Например, если \u003Ccode\u003Eexecute_queries()\u003C\u002Fcode\u003E может бросать исключение, то мы рискуем не выполнить \u003Ccode\u003EROLLBACK\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЧтобы избежать таких ситуаций, нужно использовать ваши любимые паттерны для работы с транзакциями. Я покажу один из простых вариантов ниже.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E\u002F**\n * @param KSQLite $db\n * @param callable(KSQLite):boolean\n *\u002F\nfunction do_with_transaction(KSQLite $db, callable $fn): bool {\n  if (!$db-\u003Eexec('BEGIN')) {\n    return false;\n  }\n  \u002F** @var \\Throwable $exception *\u002F\n  $exception = null;\n  try {\n    $commit = $fn($db);\n  } catch (\\Throwable $e) {\n    $db-\u003Eexec('ROLLBACK');\n    throw $e;\n  }\n  return $db-\u003Eexec($commit ? 'COMMIT' : 'ROLLBACK');\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EС такой обёрткой код из примера выше превращается в это:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$ok = do_with_transaction($db, function(KSQLite $db) {\n  return execute_queries($db);\n});\nif (!$ok) {\n  throw new Exception('do with transaction: ' . $db-\u003EgetLastError());\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"query-api\"\u003Equery API\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЧерез \u003Ccode\u003Equery\u003C\u002Fcode\u003E можно исполнить любой запрос: \u003Ccode\u003Efetch\u003C\u002Fcode\u003E и \u003Ccode\u003Eexec\u003C\u002Fcode\u003E построены поверх \u003Ccode\u003Equery\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля демонстрации некоторых возможностей реализуем \u003Ccode\u003Efetch\u003C\u002Fcode\u003E используя \u003Ccode\u003Equery\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ KPHP нельзя захватить переменную по ссылке, но захват объекта по значению эквивалентно ссылке. Поэтому, если из \u003Ccode\u003Equery\u003C\u002Fcode\u003E нужно получить данные, делается это через заполнение объекта. Для некоторых случаев вам может хватить класса \u003Ccode\u003EKSQLiteArray\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E\u002F\u002F Я специально не использую type hints в сигнатуре\n\u002F\u002F чтобы определение функции было более компактным по ширине.\n\n\u002F**\n * @param KSQLite $db\n * @param string $sql\n * @param mixed[] $params query bind params\n * @param callable(KSQLiteQueryContext):mixed $f\n * @return tuple(mixed[],bool)\n *\u002F\nfunction my_fetch($db, $sql, $params, $f) {\n  $res = new KSQLiteArray();\n  $row_func = function(KSQLiteQueryContext $ctx) use ($res, $f) {\n    $res-\u003Evalues[] = $f($ctx);\n  }\n  $ok = $this-\u003Equery($sql, $params, $row_func);\n  return tuple($res-\u003Evalues, $ok);\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003E\u003Ccode\u003E$ctx-\u003Estop()\u003C\u002Fcode\u003E просит библиотеку пропустить все следующие result row sets\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003E$ctx-\u003ErowData()\u003C\u002Fcode\u003E читает данные в list-подобный массив (без строковых ключей)\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003E$ctx-\u003ErowDataAssoc()\u003C\u002Fcode\u003E подобен \u003Ccode\u003ErowData()\u003C\u002Fcode\u003E с ключами через \u003Ccode\u003EcolumnName()\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003E$ctx-\u003EcolumnName($i)\u003C\u002Fcode\u003E возвращает имя для i-го элемента данных\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003E$ctx-\u003EcolumnType($i)\u003C\u002Fcode\u003E возвращает тип для i-го элемента данных\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003E$ctx-\u003EnumColumns()\u003C\u002Fcode\u003E возвращает количество столбцов в каждом result row set\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EМожно обойти все результаты из выборки без чтения самих данных, если вам нужны только метаданные. До тех пор, пока не вызывается \u003Ccode\u003ErowData()\u003C\u002Fcode\u003E или \u003Ccode\u003ErowDataAssoc()\u003C\u002Fcode\u003E, KSQLite не пытается прочитать и разложить данные на PHP\u002FKPHP массивы.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"upravlenie-resursami-v-ksqlite\"\u003EУправление ресурсами в KSQLite\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EБиблиотека никогда не даёт пользователю объект, у которого есть методы \u003Ccode\u003Eclose()\u003C\u002Fcode\u003E или \u003Ccode\u003Efinalize()\u003C\u002Fcode\u003E, за исключением самого объекта базы данных (но и тот по умолчанию не требует явного закрытия).\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВместо этого методы для работы с данными принимают функции, контролирующие связку параметров запросов и итерацию по результатам. Таким образом, все создаваемые SQLite сущности, требующие очистки, не выходят за пределы публичного интерфейса KSQLite.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДеструкторы могли бы быть альтернативой: финализация и\u002Fили \u003Ccode\u003Eclose()\u003C\u002Fcode\u003E вызывались бы \"когда-то потом\" и автоматически. Если при этом мы не даём публичных методов \u003Ccode\u003Eclose()\u003C\u002Fcode\u003E, то принципиальной разницы нет и очистка ресурсов всё ещё целиком лежит на самой библиотеке. Разве что с деструкторами становится менее очевидно, где заканчивается жизнь объекта. В контексте FFI и объектов, аллоцируемых C кодом, мы хотим быть вдвойне уверены, что память будет очищена правильно и своевременно. В наших интересах ограничивать время жизни таких объектов. Если мы предоставляем объекты с деструкторами, то пользователь может начать их сохранять в массивах, а, значит, мы рискуем очень долго не иметь возможности финализировать их.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЕсли предоставлять публичные методы для финализации, то мы усложняем жизнь разработчикам. Использовать нашу библиотеку правильно становится сложнее. Если кто-то кинет исключение и не закроет ресурс перед этим, то ничем хорошим это не кончится.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЯ считаю, что для подобных FFI библиотек особо важно минимизировать прямое взаимодействие с \"нативной\" частью. Вместо того чтобы перекладывать ответственность за освобождение ресурсов на пользователя, можно скрыть сложность внутри и искоренить принципиальную возможность утечек памяти.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EОсобенно сложно бороться с возможными \u003Ccode\u003Edie()\u003C\u002Fcode\u003E или \u003Ccode\u003Eexit()\u003C\u002Fcode\u003E. В идеале, стоит избегать этих механизмов, когда где-то рядом исполняется FFI код.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"ochischaem-pamyat-dazhe-v-sluchae-dieexit\"\u003EОчищаем память даже в случае die\u002Fexit\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ KPHP нет деструкторов, поэтому единственное, что нас может спасти от внезапного прекращения работы скрипта — это функция, регистрируемая через \u003Ca href=\"https:\u002F\u002Fwww.php.net\u002Fmanual\u002Fen\u002Ffunction.register-shutdown-function.php\" rel=\"nofollow noopener noreferrer\"\u003Eregister_shutdown_function\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПоскольку регистрировать на каждый объект, который мы хотим автоматически финализировать, новую shutdown функцию — это расточительно, рекомендуется использовать пакет \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKFinalize\" rel=\"nofollow noopener noreferrer\"\u003EKFinalize\u003C\u002Fa\u003E. Этот пакет позволяет сохранить список финализаторов, которые будут запущены внутри одной shutdown функции.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EИменно через этот механизм и работает автоматический \u003Ccode\u003Eclose()\u003C\u002Fcode\u003E объектов \u003Ccode\u003EKSQLite\u003C\u002Fcode\u003E. При создании нового экземпляра, мы добавляем лямбду-финализатор в список \u003Ccode\u003EKFinalize\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EРассмотрим следующий пример кода:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E$query = 'SELECT 10 AS value';\n$db-\u003Efetch($query, [], function(KSQLiteQueryContext $ctx) {\n  if (some_cond()) {\n    die(\"exiting right from the callback\\n\");\n  }\n  return 0;\n});\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВся модель очистки ресурсов KSQLite построена на том, что объекты создаются и освобождаются вне вашего кода. Вот как исполняется \u003Ccode\u003Efetch\u003C\u002Fcode\u003E (упрощённо):\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Col\u003E\r\n\u003Cli\u003EСоздаётся SQLite3 stmt\u003C\u002Fli\u003E\r\n\u003Cli\u003EЗапускается SQLite3 step\u003C\u002Fli\u003E\r\n\u003Cli\u003EВызывается предоставленная функция\u003C\u002Fli\u003E\r\n\u003Cli\u003EКогда данных больше нет, SQLite3 stmt очищается\u003C\u002Fli\u003E\r\n\u003Cli\u003EИз \u003Ccode\u003Efetch\u003C\u002Fcode\u003E возвращается результат\u003C\u002Fli\u003E\r\n\u003C\u002Fol\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПользовательская функция вызывается в блоке try\u002Fcatch, поэтому исключения не помешают корректной очистке ресурсов. Само исключение будет повторно запущено после очистки ресурсов запроса.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЕсли же на шаге 3 произойдёт \u003Ccode\u003Eexit()\u003C\u002Fcode\u003E, то мы никогда не перейдём к следующим шагам. Память, выделенная нативной библиотекой никогда не будет освобождена, потому что KPHP (и PHP) рантаймы ничего о ней не знают.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТем не менее выход есть. В классе KSQLite хранится список активных stmt объектов. Как только выделяется новый объект SQLite stmt, мы добавляем его в список. Затем мы исполняем алгоритм, как и раньше. Перед очищением памяти мы делаем \u003Ccode\u003Earray_pop\u003C\u002Fcode\u003E из этого списка. В простейшем сценарии, этот список почти всегда содержит от 0 до 1 элементов.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ нашем \"деструкторе\", который мы регистрируем для объекта KSQLite через KFinalize, мы обходим список активных объектов данного коннектора и финализируем их. Если никаких exit\u002Fdie не было, то этот список будет пустым.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВот так выглядит деструктор для KSQLite:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003EKFinalize::push(function() {\n  foreach ($this-\u003Eactive_stmt_list as $stmt) {\n    $this-\u003Elib-\u003Esqlite3_finalize($stmt);\n  }\n  \u002F\u002F Вызывать close() безопасно даже если пользователь\n  \u002F\u002F вызывал его до этого вручную.\n  $this-\u003Eclose();\n});\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"proizvoditelnost-ksqlite\"\u003EПроизводительность KSQLite\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТесты производительности здесь нужны для того, чтобы понять, насколько FFI библиотеки могут сравниться по эффективности с нативными расширениями для PHP. FFI — это единственный на данный момент способ использовать C библиотеки из KPHP, поэтому логично включить в сравнение и этот пункт.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНагрузочное тестирование будем проводить следующим образом:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EВ качестве работающего приложения возьмём \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\u002Fblob\u002Fmaster\u002Fexamples\u002Fsimple_site.php\" rel=\"nofollow noopener noreferrer\"\u003EKSQLite\u002Fexamples\u002Fsimple_site\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\r\n\u003Cli\u003EЗапускать PHP будем через \u003Ccode\u003Enginx\u003C\u002Fcode\u003E + \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EПодавать нагрузку и измерять RPS будем через \u003Ccode\u003Eab\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EСервер и воркеры будут работать на выделенных ядрах\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003Eab\u003C\u002Fcode\u003E будет работать на других выделенных ядрах\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПодробнее о методике читайте под спойлерами ниже.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cdiv class=\"scrollable-table\"\u003E\u003Ctable\u003E\r\n\u003Cthead\u003E\r\n\u003Ctr\u003E\r\n\u003Cth\u003ETest\u003C\u002Fth\u003E\r\n\u003Cth\u003ERequests\u002Fsec\u003C\u002Fth\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003C\u002Fthead\u003E\r\n\u003Ctbody\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003EPHP7.4 FFI\u003C\u002Ftd\u003E\r\n\u003Ctd\u003E5694\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003EPHP7.4 ext\u003C\u002Ftd\u003E\r\n\u003Ctd\u003E6415\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003EPHP8.1 FFI\u003C\u002Ftd\u003E\r\n\u003Ctd\u003E6147\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003EPHP8.1 ext\u003C\u002Ftd\u003E\r\n\u003Ctd\u003E6673\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003EKPHP FFI\u003C\u002Ftd\u003E\r\n\u003Ctd\u003E9010\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003C\u002Ftbody\u003E\r\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EKSQLite на данный момент не содержит никаких оптимизаций для частных случаев. Даже простой \u003Ccode\u003Eexec()\u003C\u002Fcode\u003E, которого в производимых бенчмарках много, выполняет лишнюю работу. В FFI вариантах мы получаем больше интерпретируемого PHP кода: часть логики \u003Ccode\u003Eexec()\u003C\u002Fcode\u003E реализована на самом PHP, а не на C.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EБлагодаря компиляции и информации о типах, вызовы из KPHP в C гораздо дешевле. Помогает и тот факт, что KPHP транслируется в C++, а из C++ легко можно вызывать C функции.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EPHP8.1 оказался быстрее PHP7.4 на \u003Ccode\u003E~5%\u003C\u002Fcode\u003E (JIT включен)\u003C\u002Fli\u003E\r\n\u003Cli\u003EKSQLite для PHP медленнее на \u003Ccode\u003E~10%\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EKPHP с FFI в этом тесте на \u003Ccode\u003E~25%\u003C\u002Fcode\u003E быстрее чем, PHP8.1 ext\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EДополнительная информация об окружении\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cp\u003EKPHP собран с коммита \u003Ccode\u003E1e584607616e237bc0abcc0e989e0a1725a08b68\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ php7.4 --version\nPHP 7.4.3 (cli) (built: Nov 25 2021 23:16:22) ( NTS )\n\n$ php8.1 --version\nPHP 8.1.3 (cli) (built: Feb 21 2022 14:48:42) (NTS)\n\n$ php8.1 -i | grep JIT\nPCRE JIT Support =\u003E enabled\nPCRE JIT Target =\u003E x86 64bit (little endian + unaligned)\nJIT =\u003E On\n\n$ sqlite3 --version\n3.31.1 2020-01-27\n\n$ nginx -v\nnginx version: nginx\u002F1.18.0 (Ubuntu)\n\n$ ab -V\nThis is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $\u003E\n\n$ uname -a\nLinux kphpbook 5.14.0-1024-oem 26-Ubuntu SMP Thu Feb 17 2022 x86_64 GNU\u002FLinux\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ lscpu\nArchitecture:       x86_64\nCPU op-mode(s):     32-bit, 64-bit\nByte Order:         Little Endian\nAddress sizes:      39 bits physical, 48 bits virtual\nCPU(s):             8\nThread(s) per core: 2\nCore(s) per socket: 4\nSocket(s):          1\nNUMA node(s):       1\nVendor ID:          GenuineIntel\nCPU family:         6\nModel:              140\nModel name:         11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\nStepping:           1\nCPU MHz:            2800.000\nCPU max MHz:        4700,0000\nCPU min MHz:        400,0000\nL1d cache:          192 KiB\nL1i cache:          128 KiB\nL2 cache:           5 MiB\nL3 cache:           12 MiB\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\r\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EКак запускались бенчмарки\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cp\u003EОтключаем turbo boost (снижает RPS, но увеличивает точность измерений):\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ echo \"1\" | sudo tee \u002Fsys\u002Fdevices\u002Fsystem\u002Fcpu\u002Fintel_pstate\u002Fno_turbo\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПодготавливаем \u003Ccode\u003Enginx\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E# Сохраняем pid работающего мастер-процесса nginx:\n$ nginx_pid=$(ps -aux | grep nginx | grep master | awk '{print $2}')\n# Пытаемся закрепить nginx за ядрами 2, 3 и 4:\n$ sudo taskset -cp 2-4 $nginx_pid\n# Аналогично для всех worker-процессов:\n$ nginx_workers=$(cat \u002Fproc\u002F$nginx_pid\u002Ftask\u002F$nginx_pid\u002Fchildren)\n$ for pid in $nginx_workers ; do sudo taskset -cp 2-4 $pid ; done\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EKPHP для тестов запускать так:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E# У nginx на моей машине 8 воркеров, поэтому и в KPHP укажем это значение.\n# Воркер-процессы, создаваемые веб-сервером, унаследуют параметры,\n# выставляемые через taskset.\n$ taskset -c 2-4 .\u002Fkphp_out\u002Fserver --http-port 9000 --workers-num 8\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EА нагрузку подаём скриптом с ядер 5, 6 и 7:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ taskset -c 5-7 \\\n    ab -T 'application\u002Fx-www-form-urlencoded' \\\n       -n 5000 \\\n       -c 4 \\\n       -p post.data \\\n       http:\u002F\u002Flocalhost:9001\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"php-fpm--ffi-preloading\"\u003Ephp-fpm + FFI preloading\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля того, чтобы PHP не разбирал заголовочные файлы на каждом запросе, рекомендуется использовать \u003Ccode\u003EFFI::scope\u003C\u002Fcode\u003E. Воспользоваться им можно только если нужные файлы были загружены на этапе opcache preload.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЧтобы вся эта связка работала, надо подкрутить настройки нашего PHP.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Col\u003E\r\n\u003Cli\u003E\u003Ccode\u003EFFI::load\u003C\u002Fcode\u003E для регистрации в scope мы должны делать в preload контексте\u003C\u002Fli\u003E\r\n\u003Cli\u003EМастер-процесс \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E должен быть запущен не от рута\u003C\u002Fli\u003E\r\n\u003Cli\u003EНельзя использовать \u003Ccode\u003Eopcache.preload_user\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Fol\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЭти пункты взаимосвязаны. \u003Ccode\u003Eopcache.preload\u003C\u002Fcode\u003E потребует указания \u003Ccode\u003Eopcache.preload_user\u003C\u002Fcode\u003E, если \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E работает от рута. Если мы добавим в конфиг \u003Ccode\u003Eopcache.preload_user\u003C\u002Fcode\u003E, у нас перестанет работать \u003Ccode\u003EFFI::load\u003C\u002Fcode\u003E внутри скрипта предзагрузки (на это неожиданное поведение даже заведён \u003Ca href=\"https:\u002F\u002Fbugs.php.net\u002Fbug.php?id=79232&amp;edit=3\" rel=\"nofollow noopener noreferrer\"\u003Eтикет\u003C\u002Fa\u003E).\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВариантов не очень много. \u003Ca href=\"https:\u002F\u002Fwww.reddit.com\u002Fr\u002FPHP\u002Fcomments\u002Fezi8ne\u002Fofficial_ffipreload_example_is_broken\u002F\" rel=\"nofollow noopener noreferrer\"\u003EВ одном из обсуждений\u003C\u002Fa\u003E на reddit можно найти подсказку к тому, как получить рабочее решение.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНам нужно выполнить пункт \u003Ccode\u003E(2)\u003C\u002Fcode\u003E и тогда все остальные будут выполнены без проблем, ведь \u003Ccode\u003Eopcache.preload_user\u003C\u002Fcode\u003E требуется только для рута.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EРешение будет зависеть от системы.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНа моей Ubuntu нужно было отредактировать:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003E\u003Ccode\u003E\u002Flib\u002Fsystemd\u002Fsystem\u002Fphp7.4-fpm.service\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003E\u002Flib\u002Fsystemd\u002Fsystem\u002Fphp8.1-fpm.service\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ секцию \u003Ccode\u003E[Service]\u003C\u002Fcode\u003E добавляем \u003Ccode\u003EUser\u003C\u002Fcode\u003E и \u003Ccode\u003EGroup\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"diff\"\u003E[Service]\n+ User=www-data\n+ Group=www-data\n  Type=notify\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДалее можно попробовать перезапустить сервис \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E, но, скорее всего, нужно будет ещё поменять владельцев всех файлов и каталогов в корне сайта.\u003Cbr\u002F\u003E\r\nУсловного \u003Ccode\u003Echown -R www-data ~\u002Fwww\u003C\u002Fcode\u003E будет достаточно.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EМне так же потребовалось поменять владельца файла логов \u003Ccode\u003E\u002Fvar\u002Flog\u002Fphp7.4-fpm.log\u003C\u002Fcode\u003E, но наверняка есть какой-то способ попросить \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E записывать логи в какое-то другое место, куда у пользователя будет более простой доступ.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТеперь непосредственно к самому preload скрипту. Поскольку мы ожидаем, что все FFI библиотеки будут доступны по относительному пути, мы должны запускать \u003Ccode\u003EFFI::load\u003C\u002Fcode\u003E из нужной директории. В случае CLI рабочая директория будет предсказуемая, а вот \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E может запустить скрипт предзагрузки с самого корня (\u003Ccode\u003E\u002F\u003C\u002Fcode\u003E). Чтобы сделать preload скрипт более независимым от рабочей директории, можно переходить в нужное место из самого скрипта.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ проекте KSQLite файлы располагаются так:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003Eexamples\u002F\n  preload.php\n  simple_site.php\nffilibs\u002F\n  libsqlite3\nsrc\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСледовательно, \u003Ccode\u003Effilibs\u003C\u002Fcode\u003E находится на уровень выше относительно \u003Ccode\u003Epreload.php\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E\u002F\u002F Если бы preload.php находился в корне, здесь был бы просто __DIR__.\n$root_path = __DIR__ . '\u002F..\u002F';\nif (!chdir($root_path)) {\n  throw new Exception(\"failed chdir to $root_path\\n\");\n}\n\u002F\u002F Запускаем тут все FFI::load от библиотек.\n\u002F\u002F Про договорённость Libname::loadFFI() читайте ниже.\nload_ffi_libs(); \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТеперь мы можем легко запускать приложение как через CLI, встроенный веб-сервер PHP (\u003Ccode\u003E-S\u003C\u002Fcode\u003E), \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E, а также в режиме собранного KPHP бинарника (тоже CLI + server).\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"testirovanie\"\u003EТестирование\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F452\u002Fef7\u002Fff0\u002F452ef7ff04ba330c1277db05bc368715.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F452\u002Fef7\u002Fff0\u002F452ef7ff04ba330c1277db05bc368715.png\"\u002F\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EТестировать мы будем как на PHP, так и на KPHP, поэтому нам понадобятся сразу два пакета:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E# phpunit мы используем для запуска тестов в PHP режиме\n$ composer require --dev phpunit\u002Fphpunit:9.5.16\n# kphpunit - это то, что реализует phpunit для KPHP\n$ composer require --dev vkcom\u002Fkphpunit:v1.0.0\n# Устанавливаем утилиту ktest для запусков KPHP тестов и бенчмарков\n$ composer require --dev vkcom\u002Fktest-script\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EИсполнять тесты на обоих языках полезно, чтобы ловить некоторые нюансы различий поведения PHP и KPHP. А ещё это гарантирует, что типизация в проекте не сломалась.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСоздадим тестовый класс \u003Ccode\u003Etests\u002FKSQLiteTest.php\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E&lt;?php\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass KSQLiteTest extends TestCase {\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗаполнять \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\u002Fblob\u002Fmaster\u002Ftests\u002FKSQLiteTest.php\" rel=\"nofollow noopener noreferrer\"\u003Eвесь класс\u003C\u002Fa\u003E в рамках этой статьи мы не будем. Затронем лишь самые важные аспекты.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля создания, заполнения и очистки БД мы воспользуемся \u003Ccode\u003EsetUpBeforeClass\u003C\u002Fcode\u003E и \u003Ccode\u003EtearDownAfterClass\u003C\u002Fcode\u003E. Соединение с БД будем держать в статическом поле класса.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EУпрощённый код setUpBeforeClass и tearDownAfterClass\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"php\"\u003Eprivate static $db_filename = '';\nprivate static KSQLite $db;\nprivate static $coord_values = [];\n\npublic static function setUpBeforeClass(): void {\n  if (KPHP_COMPILER_VERSION) { KSQLite::loadFFI(); }\n\n  $tmp_dir = '\u002Ftmp'; \u002F\u002F или sys_get_temp_dir()\n  self::$db_filename = (string)tempnam($tmp_dir, 'testdb');\n\n  self::$db = new KSQLite();\n  if (!self::$db-\u003Eopen(self::$db_filename)) {\n    throw new \\Exception(self::$db-\u003EgetLastError());\n  }\n\n  \u002F\u002F Создаём тестовые таблицы.\n  $tables = [\n    'CREATE TABLE readonly_coord(\n      coord_id INTEGER PRIMARY KEY,\n      layer INTEGER DEFAULT 0 NOT NULL,\n      x REAL NOT NULL,\n      y REAL NOT NULL\n    )',\n  ];\n  foreach ($tables as $q) {\n    if (!self::$db-\u003Eexec($q)) {\n      throw new \\Exception(self::$db-\u003EgetLastError());\n    }\n  }\n\n  $values = [\n    [142.5, 218.0],\n    [0.0, 0.0],\n    [1.0, 1.0],\n  ];\n  \u002F\u002F Значения нам понадобятся чтобы потом сравнивать\n  \u002F\u002F результаты выборок в тестах.\n  foreach ($values as $i =\u003E $c) {\n    [$x, $y] = $c;\n    self::$coord_values[] = [\n      'x' =\u003E $x,\n      'y' =\u003E $y,\n    ];\n  }\n  $q = 'INSERT INTO readonly_coord(x, y) VALUES(?, ?)';\n  $bind_fn = function(KSQLiteParamsBinder $b) use ($values) {\n    return $b-\u003EbindFromList($values);\n  }\n  $ok = self::$db-\u003EexecPrepared($q, $bind_fn);\n  if (!$ok) {\n    throw new \\Exception(self::$db-\u003EgetLastError());\n  }\n}\n\npublic static function tearDownAfterClass(): void {\n  self::$db-\u003Eclose();\n  unlink(self::$db_filename);\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ написании самих тестов нет никаких особенностей. Обычные phpunit тесты.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003Epublic function testFetchColumn() {\n  $tests = [\n    0,\n    102,\n    4.25,\n    'str value',\n    '\"str value with quotes\"',\n    null,\n  ];\n  $query = 'SELECT :x';\n  foreach ($tests as $x) {\n    $params = [':x' =\u003E $x];\n    [$col, $ok] = self::$db-\u003EfetchColumn($query, $params);\n    $this-\u003EassertTrue($ok);\n    $this-\u003EassertSame($col, $x);\n  }\n\n  $query = 'SELECT COUNT(*) FROM readonly_coord';\n  [$count, $ok] = self::$db-\u003EfetchColumn($query);\n  $this-\u003EassertTrue($ok);\n  $this-\u003EassertSame($count, count(self::$coord_values));\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗапуск phpunit для PHP:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ php -d opcache.enable_cli=true \\\n      -d opcache.preload=preload.php \\\n      .\u002Fvendor\u002Fbin\u002Fphpunit \\\n      --bootstrap vendor\u002Fautoload.php tests\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЗапуск ktest (kphpunit) для KPHP:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E$ .\u002Fvendor\u002Fbin\u002Fktest phpunit --enable-ffi tests\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНа остальные вопросы по тестированию ответят исходники KSQLite:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\u002Fblob\u002Fmaster\u002FMakefile\" rel=\"nofollow noopener noreferrer\"\u003EMakefile\u003C\u002Fa\u003E содержит команды \u003Ccode\u003Emake test\u003C\u002Fcode\u003E и \u003Ccode\u003Emake ci-test\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\u002Fblob\u002Fmaster\u002F.github\u002Fworkflows\u002Fphp.yml\" rel=\"nofollow noopener noreferrer\"\u003E.github\u002Fworkflows\u002Fphp.yml\u003C\u002Fa\u003E описывает workflow для запуска тестов\u003C\u002Fli\u003E\r\n\u003Cli\u003EПримеры (examples) можно превратить в тесты, см. \u003Ccode\u003Ektest compare\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cblockquote\u003EЯ рекомендую ознакомиться со статьёй \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fvk\u002Fblog\u002F572424\u002F\"\u003EЗаметки KPHP: тестирование и бенчмарки\u003C\u002Fa\u003E. Там тема тестирования KPHP затронута более полно.\u003C\u002Fblockquote\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"benchmarki\"\u003EБенчмарки\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EКак уже упоминалось выше, KSQLite — это не многолетний код, который мог обрасти разнообразными оптимизациями. Многие функции можно ускорить.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНо ускорять вслепую, руководствуясь только своей интуицией и предчувствием — это не самая эффективная методология. В худшем случае таким оптимизации могут сделать только хуже. Стоит производить хотя бы минимальные действия по проверке гипотезы — запускать бенчмарки.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСоздадим файл \u003Ccode\u003Ebenchmarks\u002FBenchmarkKSQLite.php\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E&lt;?php\n\nuse KSQLite\\KSQLite;\n\nclass BenchmarkKSQLite {\n  private KSQLite $db;\n\n  public function __construct() {\n    if (KPHP_COMPILER_VERSION) { KSQLite::loadFFI(); }\n    $this-\u003Edb = new KSQLite();\n    if (!$this-\u003Edb-\u003Eopen('benchdb')) {\n      throw new \\Exception($this-\u003Edb-\u003EgetLastError());\n    }\n  }\n\n  public function benchmarkExecSelect1() {\n    if (!$this-\u003Edb-\u003Eexec('SELECT 1')) {\n      throw new \\Exception($this-\u003Edb-\u003EgetLastError());\n    }\n  }\n\n  public function benchmarkFetchRowConst() {\n    [$_, $ok] = $this-\u003Edb-\u003EfetchRow(\"SELECT 1, 2.5, 'hello', null\");\n    if (!$ok) {\n      throw new \\Exception($this-\u003Edb-\u003EgetLastError());\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003Ektest позволяет запускать бенчмарки на PHP и KPHP. Это полезное свойство, ведь даже если приложение размещается на конечных серверах в виде KPHP бинарника, PHP часто используется для локального тестирования.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E# Запускаем бенчмарки на KPHP:\n$ .\u002Fvendor\u002Fbin\u002Fktest bench .\u002Fbenchmarks\nBenchmarkKSQLite::ExecSelect1   14740   5520.0 ns\u002Fop\nBenchmarkKSQLite::FetchCount    5340    16751.0 ns\u002Fop\nBenchmarkKSQLite::FetchRowConst 7640    12406.0 ns\u002Fop\nBenchmarkKSQLite::FetchOneRow   3380    29379.0 ns\u002Fop\nBenchmarkKSQLite::FetchAllRows  3720    27008.0 ns\u002Fop\nok BenchmarkKSQLite\n\n# Запускаем бенчмарки на PHP8.1:\n$ .\u002Fvendor\u002Fbin\u002Fktest bench-php --preload preload.php .\u002Fbenchmarks\nBenchmarkKSQLite::ExecSelect1   7760    12045.0 ns\u002Fop\nBenchmarkKSQLite::FetchCount    2720    27958.0 ns\u002Fop\nBenchmarkKSQLite::FetchRowConst 3860    23208.0 ns\u002Fop\nBenchmarkKSQLite::FetchOneRow   2080    41163.0 ns\u002Fop\nBenchmarkKSQLite::FetchAllRows  2400    40979.0 ns\u002Fop\nok BenchmarkKSQLite\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля удобного сравнения результатов бенчмарков PHP и KPHP есть команда \u003Ccode\u003Ebench-vs-php\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"bash\"\u003E.\u002Fvendor\u002Fbin\u002Fktest bench-vs-php --preload preload.php .\u002Fbenchmarks\nname                    PHP time\u002Fop  KPHP time\u002Fop  delta\nKSQLite::ExecSelect1    10.5µs ± 1%   5.5µs ± 3%  -47.95%\nKSQLite::FetchCount     28.0µs ± 1%  17.1µs ± 1%  -38.79%\nKSQLite::FetchRowConst  23.5µs ± 1%  11.5µs ± 1%  -50.82%\nKSQLite::FetchOneRow    40.8µs ± 1%  27.1µs ± 1%  -33.57%\nKSQLite::FetchAllRows   40.7µs ± 1%  26.5µs ± 1%  -35.07%\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПодробнее о бенчмарках можно почитать в уже \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fvk\u002Fblog\u002F572424\u002F\"\u003Eупомянутой выше статье\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"konvencii-dlya-ffi-paketov\"\u003EКонвенции для FFI пакетов\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ этой части кратко описаны основные концепции, вводимые в статье.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EОпциональный текст\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Ch3 id=\"metod-loadffi\"\u003EМетод loadFFI\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПоскольку контексты загрузки могут отличаться для KPHP и PHP, стоит предоставить вызов инициализации в руки пользователей. В основном классе библиотеки определяем статический метод \u003Ccode\u003EloadFFI()\u003C\u002Fcode\u003E, который выполнит \u003Ccode\u003EFFI::load()\u003C\u002Fcode\u003E на все файлы, связанные с библиотекой.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003Epublic static function loadFFI(): bool {\n  return \\FFI::load(__DIR__ . '\u002Fsqlite.h') !== null;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ KPHP вы будете вызывать этот метод где-то в начале скрипта, который является точкой входа в приложение:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003Eif (KPHP_COMPILER_VERSION) {\n  KSQLite::loadFFI();\n  SomeOtherLib::loadFFI();\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ PHP это будет preload скрипт с такими же вызовами, но без проверки на KPHP_COMPILER_VERSION:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E&lt;?php\n\nrequire_once __DIR__ . '\u002Fautoload.php'\n\nKSQLite::loadFFI();\nSomeOtherLib::loadFFI();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПочему это важно:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EМеньше беспорядка при использовании нескольких FFI библиотек\u003C\u002Fli\u003E\r\n\u003Cli\u003EКонтроль над контекстом, в котором исполняется \u003Ccode\u003EFFI::load\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"opcachepreload-i-chdir\"\u003Eopcache.preload и chdir\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ предыдущем примере мы использовали методы \u003Ccode\u003EloadFFI()\u003C\u002Fcode\u003E, но есть нюанс, который мы не затронули. В зависимости от приложения, \u003Ccode\u003Epreload.php\u003C\u002Fcode\u003E может лежать в разных местах. Сам же скрипт тоже может запускаться из разных директорий.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"php\"\u003E\u002F\u002F Если бы preload.php находился в корне, здесь был бы просто __DIR__.\n$root_path = __DIR__ . '\u002F..\u002F';\nif (!chdir($root_path)) {\n  throw new Exception(\"failed chdir to $root_path\\n\");\n}\nKSQLite::loadFFI();\nSomeOtherLib::loadFFI();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПочему это важно:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EМожно вызывать скрипт из любой директории\u003C\u002Fli\u003E\r\n\u003Cli\u003EЭта схема работает как для CLI, так и для \u003Ccode\u003Ephp-fpm\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"ffi_lib\"\u003EFFI_LIB\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПуть в \u003Ccode\u003E#define FFI_LIB\u003C\u002Fcode\u003E пишем относительный, через каталог \u003Ccode\u003Effilibs\u003C\u002Fcode\u003E. Никакого платформенного расширения, типа \u003Ccode\u003E.so\u003C\u002Fcode\u003E мы не указываем.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E#define FFI_LIB \".\u002Fffilibs\u002Flibsqlite3\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EДля удобства, рекомендуется предоставлять аналог скрипта \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\u002Fblob\u002Fmaster\u002Flocate_lib.php\" rel=\"nofollow noopener noreferrer\"\u003Elocate_lib.php\u003C\u002Fa\u003E, чтобы пользователям было проще правильно установить библиотеку.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПочему это важно:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EПроще инструкции установки. Везде идентичные (Windows, MacOS, Linux)\u003C\u002Fli\u003E\r\n\u003Cli\u003EМожно легко переносить директорию с проектом между машинами\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ccode\u003Effilibs\u003C\u002Fcode\u003E может быть ссылкой на какую-то системную папку \u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"izbegaem-utechek-pamyati\"\u003EИзбегаем утечек памяти\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EСамостоятельно удалять объекты, созданные через \u003Ccode\u003EFFI::new\u003C\u002Fcode\u003E не нужно.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EОчистки или финализации требуют те объекты, что инициализируются внутри C кода. Эти аллокации могут либо менять внутреннее состояние библиотеки, либо использовать системный аллокатор. В любом из этих случаев, нам надо самостоятельно вызвать C функцию-деструктор, предоставляемую библиотекой.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВот несколько рекомендаций:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EИспользуйте \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKFinalize\" rel=\"nofollow noopener noreferrer\"\u003EKFinalize\u003C\u002Fa\u003E для эмуляции деструкторов\u003C\u002Fli\u003E\r\n\u003Cli\u003EЕсли можно инкапсулировать финализируемые объекты — сделайте это\u003C\u002Fli\u003E\r\n\u003Cli\u003EПроектируйте такое API, которое сложно использовать неправильно\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EОбработка ошибок должна быть консистентной и предсказуемой. Исключения могут быть неожиданными — пользователь должен быть к ним готов, чтобы на месте получения исключения освободить ресурсы.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПочему это важно:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EВ режиме работы сервера, небольшая утечка становится большой через пару тысяч запросов\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"zaklyuchenie\"\u003EЗаключение\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПопробуйте \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002FKSQLite\" rel=\"nofollow noopener noreferrer\"\u003EKSQLite\u003C\u002Fa\u003E на PHP, а потом запустите его на KPHP.\u003Cbr\u002F\u003E\r\nСоздавайте свои FFI библиотеки и \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002Fawesome-kphp.git\" rel=\"nofollow noopener noreferrer\"\u003Eделитесь ими\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЕсли у вас остались какие-то вопросы по KSQLite или FFI в KPHP — прошу в комментарии.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"poleznye-ssylki\"\u003EПолезные ссылки\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fquasilyte\u002Fawesome-kphp.git\" rel=\"nofollow noopener noreferrer\"\u003Eawesome-kphp\u003C\u002Fa\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Ft.me\u002Fkphp_chat\" rel=\"nofollow noopener noreferrer\"\u003EНеофициальный чат KPHP-сообщества\u003C\u002Fa\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EСтатья \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fvk\u002Fblog\u002F581238\u002F\"\u003EСоздаём игру на KPHP с помощью FFI и SDL\u003C\u002Fa\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EСтатья \u003Ca href=\"https:\u002F\u002Fphp.zone\u002Fpost\u002Fkphp-in-life\" rel=\"nofollow noopener noreferrer\"\u003EПробуем KPHP: реально ли его использовать в своих проектах\u003C\u002Fa\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EСтатья \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fvk\u002Fblog\u002F572424\u002F\"\u003EЗаметки KPHP: тестирование и бенчмарки\u003C\u002Fa\u003E\u003C\u002Fli\u003E\r\n\u003Cli\u003EСтатья \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fvk\u002Fblog\u002F527420\u002F\"\u003EВКонтакте снова выкладывает KPHP\u003C\u002Fa\u003E\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kphp"},{"titleHtml":"php"},{"titleHtml":"sqlite"},{"titleHtml":"ffi"},{"titleHtml":"ksqlite"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F653677\u002Fbc75c868bcb4bbc0256bca68d91ac4c8\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F653677\u002Fbc75c868bcb4bbc0256bca68d91ac4c8\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fpost\\\u002F653677\\\u002F\"},\"headline\":\"Используем SQLite в KPHP и PHP через FFI\",\"datePublished\":\"2022-03-11T17:53:06+03:00\",\"dateModified\":\"2022-03-11T17:53:06+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Искандер\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Сегодня я расскажу о новой библиотеке, которая позволяет использовать SQLite сразу из PHP и KPHP. Создавать FFI пакеты &mdash; не просто. Под катом будут ответы на сл...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fpost\\\u002F653677\\\u002F#post-content-body\",\"about\":[\"h_webdev\",\"h_open_source\",\"h_php\",\"h_programming\",\"h_sqlite\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fbo\\\u002Fnc\\\u002Fpi\\\u002Fboncpiokbph5gehyjnsqycl_78i.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fys\\\u002Fm6\\\u002Fxe\\\u002Fysm6xens23eqrhj0h7_53khn8ni.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F452\\\u002Fef7\\\u002Fff0\\\u002F452ef7ff04ba330c1277db05bc368715.png\"]}","metaDescription":"Сегодня я расскажу о новой библиотеке, которая позволяет использовать SQLite сразу из PHP и KPHP.\r\nСоздавать FFI пакеты — не просто. Под катом будут ответы на следующие вопросы:\r\n\r\nКак упростить...","mainImageUrl":null,"amp":false,"customTrackerLinks":[]},"polls":[],"commentsEnabled":true,"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"view":"cards","lastVisitedRoute":{},"ssrCommentsArticleIds":[],"karma":{}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{"653677":{"refs":{"24156183":{"id":"24156183","parentId":null,"level":0,"timePublished":"2022-03-11T15:28:01+00:00","timeChanged":null,"isSuspended":false,"score":1,"votesCount":1,"message":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003EОтличные новости! Теперь бы еще для PostgreSQL сделать обвязку ;)\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","editorVersion":2,"author":{"id":"91059","alias":"sbase","fullname":"Алексей Васильев","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fb63\u002F472\u002Fc03\u002Fb63472c03c768a3aa2edb1e5f1eb0efe.jpg","speciality":"Agile\u002FXP coach, ТОС-консультант"},"isAuthor":false,"isPostAuthor":false,"isNew":false,"isFavorite":false,"isCanEdit":false,"timeEditAllowedTill":null,"children":[],"vote":{"value":null,"isCanVote":false}}},"root":["24156183"]}},"searchCommentsResults":null,"previewComment":null,"pagesCount":null,"commentAccess":{"isCanComment":false,"cantCommentReasonKey":"AUTH_REQUIRED","cantCommentReason":"Authorization required","data":null},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":1647012481,"moderated":[],"moderatedIds":[],"commentRoute":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"vacancies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"unreadCount":0,"pagesCount":0,"isLoadMore":false},"desktopState":{"desktopFl":null,"desktopHl":null,"isChecked":false,"isLoginDemanded":false},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":"true"},"flows":{"flows":[{"alias":"develop","id":1,"route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"alias":"admin","id":6,"route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"alias":"design","id":2,"route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"alias":"management","id":3,"route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"alias":"marketing","id":4,"route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"alias":"popsci","id":7,"route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}]},"global":{"isPwa":false,"device":"desktop","isHabrCom":true},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"infoPage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"search":null,"query":{},"pathname":null,"path":null,"href":""},"searchQuery":null},"me":{"user":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"pinnedPost":{"pinnedPost":null},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":false,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"technotext":{"nominationsList":[]},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"items":{},"pagesCache":{},"markedViewedSilently":{},"markedRead":{},"unreadCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null},"unviewedCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null}}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script> 
  <script src="https://assets.habr.com/habr-web/js/chunk-vendors.55ca5167.js" defer></script>
  <script src="https://assets.habr.com/habr-web/js/page-article-comments.97bb766a.js" defer></script>
  <script src="https://assets.habr.com/habr-web/js/app.69ba180e.js" defer></script> 
  <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    </script> 
  <script type="text/javascript">
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(24049213, "init", {
      defer:true,
      trackLinks:true,
      accurateTrackBounce:true,
      webvisor:false,
    });
  </script> 
  <noscript> 
   <div> 
    <img src="https://mc.yandex.ru/watch/24049213" style="position:absolute; left:-9999px;" alt=""> 
   </div> 
  </noscript> 
  <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script> 
  <script src="/js/ads.js" onload="window['zhY4i4nJ9K'] = true"></script>  
 </body>
</html>